"""Ethernet MAC client library functions. See LPC17xx CMSIS-Compliant 
Standard Peripheral Firmware Driver Library documentation.
"""

from internals import robocaller, cstruct

__author__ =			"Neil MacMunn"
__email__ =				"neil@gumstix.com"
__copyright__ = 	"Copyright 2010, Gumstix Inc"
__license__ = 		"BSD 2-Clause"
__version__ =			"0.1"

EMAC_PHY_STAT_LINK = (0)
EMAC_PHY_STAT_SPEED = (1)		
EMAC_PHY_STAT_DUP = (2)
EMAC_MODE_AUTO = (0)		
EMAC_MODE_10M_FULL = (1)		
EMAC_MODE_10M_HALF = (2)		
EMAC_MODE_100M_FULL = (3)		
EMAC_MODE_100M_HALF = (4)	
EMAC_NUM_RX_FRAG = 4           
EMAC_NUM_TX_FRAG = 3           
EMAC_ETH_MAX_FLEN = 1536        
EMAC_TX_FRAME_TOUT = 0x00100000  
EMAC_MAC1_REC_EN = 0x00000001  
EMAC_MAC1_PASS_ALL = 0x00000002  
EMAC_MAC1_RX_FLOWC = 0x00000004  
EMAC_MAC1_TX_FLOWC = 0x00000008  
EMAC_MAC1_LOOPB = 0x00000010  
EMAC_MAC1_RES_TX = 0x00000100  
EMAC_MAC1_RES_MCS_TX = 0x00000200  
EMAC_MAC1_RES_RX = 0x00000400  
EMAC_MAC1_RES_MCS_RX = 0x00000800  
EMAC_MAC1_SIM_RES = 0x00004000  
EMAC_MAC1_SOFT_RES = 0x00008000  
EMAC_MAC2_FULL_DUP = 0x00000001  
EMAC_MAC2_FRM_LEN_CHK = 0x00000002  
EMAC_MAC2_HUGE_FRM_EN = 0x00000004  
EMAC_MAC2_DLY_CRC = 0x00000008  
EMAC_MAC2_CRC_EN = 0x00000010  
EMAC_MAC2_PAD_EN = 0x00000020  
EMAC_MAC2_VLAN_PAD_EN = 0x00000040  
EMAC_MAC2_ADET_PAD_EN = 0x00000080  
EMAC_MAC2_PPREAM_ENF = 0x00000100  
EMAC_MAC2_LPREAM_ENF = 0x00000200  
EMAC_MAC2_NO_BACKOFF = 0x00001000  
EMAC_MAC2_BACK_PRESSURE = 0x00002000  
EMAC_MAC2_EXCESS_DEF = 0x00004000  

def EMAC_IPGT_BBIPG(n):
  return (n&0x7F)
  
EMAC_IPGT_FULL_DUP = (EMAC_IPGT_BBIPG(0x15))
EMAC_IPGT_HALF_DUP = (EMAC_IPGT_BBIPG(0x12))

def EMAC_IPGR_NBBIPG_P2(n):
  return (n&0x7F)
  
EMAC_IPGR_P2_DEF = (EMAC_IPGR_NBBIPG_P2(0x12))

def EMAC_IPGR_NBBIPG_P1(n):
  return ((n&0x7F)<<8)
  
EMAC_IPGR_P1_DEF = EMAC_IPGR_NBBIPG_P1(0x0C)

def EMAC_CLRT_MAX_RETX(n):
  return (n&0x0F)

def EMAC_CLRT_COLL(n):
  return ((n&0x3F)<<8)

EMAC_CLRT_DEF = ((EMAC_CLRT_MAX_RETX(0x0F))|(EMAC_CLRT_COLL(0x37)))

def EMAC_MAXF_MAXFRMLEN(n):
  return (n&0xFFFF)

EMAC_SUPP_SPEED = 0x00000100  	
EMAC_SUPP_RES_RMII = 0x00000800  	
EMAC_TEST_SHCUT_PQUANTA = 0x00000001  	
EMAC_TEST_TST_PAUSE = 0x00000002  	
EMAC_TEST_TST_BACKP = 0x00000004  	
EMAC_MCFG_SCAN_INC = 0x00000001  	
EMAC_MCFG_SUPP_PREAM = 0x00000002

def EMAC_MCFG_CLK_SEL(n):
  return ((n&0x0F)<<2)
  
EMAC_MCFG_RES_MII = 0x00008000  	
EMAC_MCFG_MII_MAXCLK = 2500000		
EMAC_MCMD_READ = 0x00000001  	
EMAC_MCMD_SCAN = 0x00000002  	
EMAC_MII_WR_TOUT = 0x00050000  	
EMAC_MII_RD_TOUT = 0x00050000 

def EMAC_MADR_REG_ADR(n):
  return (n&0x1F)
  		
def EMAC_MADR_PHY_ADR(n):
  return ((n&0x1F)<<8)
  
def EMAC_MWTD_DATA(n):
  return (n&0xFFFF)
		
def EMAC_MRDD_DATA(n):
  return (n&0xFFFF)
		
EMAC_MIND_BUSY = 0x00000001  	
EMAC_MIND_SCAN = 0x00000002  	
EMAC_MIND_NOT_VAL = 0x00000004  	
EMAC_MIND_MII_LINK_FAIL = 0x00000008  	
EMAC_CR_RX_EN = 0x00000001  	
EMAC_CR_TX_EN = 0x00000002  	
EMAC_CR_REG_RES = 0x00000008  	
EMAC_CR_TX_RES = 0x00000010  	
EMAC_CR_RX_RES = 0x00000020  	
EMAC_CR_PASS_RUNT_FRM = 0x00000040  	
EMAC_CR_PASS_RX_FILT = 0x00000080  	
EMAC_CR_TX_FLOW_CTRL = 0x00000100  	
EMAC_CR_RMII = 0x00000200  	
EMAC_CR_FULL_DUP = 0x00000400  	
EMAC_SR_RX_EN = 0x00000001  	
EMAC_SR_TX_EN = 0x00000002  	
EMAC_TSV0_CRC_ERR = 0x00000001  
EMAC_TSV0_LEN_CHKERR = 0x00000002  
EMAC_TSV0_LEN_OUTRNG = 0x00000004  
EMAC_TSV0_DONE = 0x00000008  
EMAC_TSV0_MCAST = 0x00000010  
EMAC_TSV0_BCAST = 0x00000020  
EMAC_TSV0_PKT_DEFER = 0x00000040  
EMAC_TSV0_EXC_DEFER = 0x00000080  
EMAC_TSV0_EXC_COLL = 0x00000100  
EMAC_TSV0_LATE_COLL = 0x00000200  
EMAC_TSV0_GIANT = 0x00000400  
EMAC_TSV0_UNDERRUN = 0x00000800  
EMAC_TSV0_BYTES = 0x0FFFF000  
EMAC_TSV0_CTRL_FRAME = 0x10000000  
EMAC_TSV0_PAUSE = 0x20000000  
EMAC_TSV0_BACK_PRESS = 0x40000000  
EMAC_TSV0_VLAN = 0x80000000  
EMAC_TSV1_BYTE_CNT = 0x0000FFFF  
EMAC_TSV1_COLL_CNT = 0x000F0000  
EMAC_RSV_BYTE_CNT = 0x0000FFFF  
EMAC_RSV_PKT_IGNORED = 0x00010000  
EMAC_RSV_RXDV_SEEN = 0x00020000  
EMAC_RSV_CARR_SEEN = 0x00040000  
EMAC_RSV_REC_CODEV = 0x00080000  
EMAC_RSV_CRC_ERR = 0x00100000  
EMAC_RSV_LEN_CHKERR = 0x00200000  
EMAC_RSV_LEN_OUTRNG = 0x00400000  
EMAC_RSV_REC_OK = 0x00800000  
EMAC_RSV_MCAST = 0x01000000  
EMAC_RSV_BCAST = 0x02000000  
EMAC_RSV_DRIB_NIBB = 0x04000000  
EMAC_RSV_CTRL_FRAME = 0x08000000  
EMAC_RSV_PAUSE = 0x10000000  
EMAC_RSV_UNSUPP_OPC = 0x20000000  
EMAC_RSV_VLAN = 0x40000000

def EMAC_FCC_MIRR_CNT(n):
  return (n&0xFFFF)
  		
def EMAC_FCC_PAUSE_TIM(n):
  return ((n&0xFFFF)<<16)
  	
def EMAC_FCS_MIRR_CNT(n):
  return (n&0xFFFF)
  		
EMAC_RFC_UCAST_EN = 0x00000001  
EMAC_RFC_BCAST_EN = 0x00000002  
EMAC_RFC_MCAST_EN = 0x00000004  
EMAC_RFC_UCAST_HASH_EN = 0x00000008  
EMAC_RFC_MCAST_HASH_EN = 0x00000010  
EMAC_RFC_PERFECT_EN = 0x00000020  
EMAC_RFC_MAGP_WOL_EN = 0x00001000  
EMAC_RFC_PFILT_WOL_EN = 0x00002000  
EMAC_WOL_UCAST = 0x00000001  
EMAC_WOL_BCAST = 0x00000002  
EMAC_WOL_MCAST = 0x00000004  
EMAC_WOL_UCAST_HASH = 0x00000008  
EMAC_WOL_MCAST_HASH = 0x00000010  
EMAC_WOL_PERFECT = 0x00000020  
EMAC_WOL_RX_FILTER = 0x00000080  
EMAC_WOL_MAG_PACKET = 0x00000100  
EMAC_WOL_BITMASK = 0x01BF		
EMAC_INT_RX_OVERRUN = 0x00000001  
EMAC_INT_RX_ERR = 0x00000002  
EMAC_INT_RX_FIN = 0x00000004  
EMAC_INT_RX_DONE = 0x00000008  
EMAC_INT_TX_UNDERRUN = 0x00000010  
EMAC_INT_TX_ERR = 0x00000020  
EMAC_INT_TX_FIN = 0x00000040  
EMAC_INT_TX_DONE = 0x00000080  
EMAC_INT_SOFT_INT = 0x00001000  
EMAC_INT_WAKEUP = 0x00002000  
EMAC_PD_POWER_DOWN = 0x80000000 

def EMAC_RCTRL_SIZE(n):
  return (n&0x7FF)
  	
EMAC_RCTRL_INT = 0x80000000  	
EMAC_RHASH_SA = 0x000001FF  	
EMAC_RHASH_DA = 0x001FF000  	
EMAC_RINFO_SIZE = 0x000007FF  
EMAC_RINFO_CTRL_FRAME = 0x00040000  
EMAC_RINFO_VLAN = 0x00080000  
EMAC_RINFO_FAIL_FILT = 0x00100000  
EMAC_RINFO_MCAST = 0x00200000  
EMAC_RINFO_BCAST = 0x00400000  
EMAC_RINFO_CRC_ERR = 0x00800000  
EMAC_RINFO_SYM_ERR = 0x01000000  
EMAC_RINFO_LEN_ERR = 0x02000000  
EMAC_RINFO_RANGE_ERR = 0x04000000  
EMAC_RINFO_ALIGN_ERR = 0x08000000  
EMAC_RINFO_OVERRUN = 0x10000000  
EMAC_RINFO_NO_DESCR = 0x20000000  
EMAC_RINFO_LAST_FLAG = 0x40000000  
EMAC_RINFO_ERR = 0x80000000  
EMAC_RINFO_ERR_MASK = (EMAC_RINFO_FAIL_FILT | EMAC_RINFO_CRC_ERR   | EMAC_RINFO_SYM_ERR | \
EMAC_RINFO_LEN_ERR   | EMAC_RINFO_ALIGN_ERR | EMAC_RINFO_OVERRUN)
EMAC_TCTRL_SIZE = 0x000007FF  
EMAC_TCTRL_OVERRIDE = 0x04000000  
EMAC_TCTRL_HUGE = 0x08000000  
EMAC_TCTRL_PAD = 0x10000000  
EMAC_TCTRL_CRC = 0x20000000  
EMAC_TCTRL_LAST = 0x40000000  
EMAC_TCTRL_INT = 0x80000000  
EMAC_TINFO_COL_CNT = 0x01E00000  
EMAC_TINFO_DEFER = 0x02000000  
EMAC_TINFO_EXCESS_DEF = 0x04000000  
EMAC_TINFO_EXCESS_COL = 0x08000000  
EMAC_TINFO_LATE_COL = 0x10000000  
EMAC_TINFO_UNDERRUN = 0x20000000  
EMAC_TINFO_NO_DESCR = 0x40000000  
EMAC_TINFO_ERR = 0x80000000  
EMAC_PHY_RESP_TOUT = 0x100000
EMAC_OLD_EMAC_MODULE_ID = 0x39022000  
EMAC_PHY_REG_BMCR = 0x00        
EMAC_PHY_REG_BMSR = 0x01        
EMAC_PHY_REG_IDR1 = 0x02        
EMAC_PHY_REG_IDR2 = 0x03        
EMAC_PHY_REG_ANAR = 0x04        
EMAC_PHY_REG_ANLPAR = 0x05        
EMAC_PHY_REG_ANER = 0x06        
EMAC_PHY_REG_ANNPTR = 0x07        
EMAC_PHY_REG_LPNPA = 0x08
EMAC_PHY_REG_STS = 0x10        
EMAC_PHY_REG_MICR = 0x11        
EMAC_PHY_REG_MISR = 0x12        
EMAC_PHY_REG_FCSCR = 0x14        
EMAC_PHY_REG_RECR = 0x15        
EMAC_PHY_REG_PCSR = 0x16        
EMAC_PHY_REG_RBR = 0x17        
EMAC_PHY_REG_LEDCR = 0x18        
EMAC_PHY_REG_PHYCR = 0x19        
EMAC_PHY_REG_10BTSCR = 0x1A        
EMAC_PHY_REG_CDCTRL1 = 0x1B        
EMAC_PHY_REG_EDCR = 0x1D        
EMAC_PHY_BMCR_RESET = (1<<15)		
EMAC_PHY_BMCR_LOOPBACK = (1<<14)		
EMAC_PHY_BMCR_SPEED_SEL = (1<<13)		
EMAC_PHY_BMCR_AN = (1<<12)		
EMAC_PHY_BMCR_POWERDOWN = (1<<11)		
EMAC_PHY_BMCR_ISOLATE = (1<<10)		
EMAC_PHY_BMCR_RE_AN = (1<<9)		
EMAC_PHY_BMCR_DUPLEX = (1<<8)		
EMAC_PHY_BMSR_100BE_T4 = (1<<15)		
EMAC_PHY_BMSR_100TX_FULL = (1<<14)		
EMAC_PHY_BMSR_100TX_HALF = (1<<13)		
EMAC_PHY_BMSR_10BE_FULL = (1<<12)		
EMAC_PHY_BMSR_10BE_HALF = (1<<11)		
EMAC_PHY_BMSR_NOPREAM = (1<<6)		
EMAC_PHY_BMSR_AUTO_DONE = (1<<5)		
EMAC_PHY_BMSR_REMOTE_FAULT = (1<<4)		
EMAC_PHY_BMSR_NO_AUTO = (1<<3)		
EMAC_PHY_BMSR_LINK_ESTABLISHED = (1<<2)		
EMAC_PHY_SR_REMOTE_FAULT = (1<<6)		
EMAC_PHY_SR_JABBER = (1<<5)		
EMAC_PHY_SR_AUTO_DONE = (1<<4)		
EMAC_PHY_SR_LOOPBACK = (1<<3)		
EMAC_PHY_SR_DUP = (1<<2)		
EMAC_PHY_SR_SPEED = (1<<1)		
EMAC_PHY_SR_LINK = (1<<0)		
EMAC_PHY_FULLD_100M = 0x2100      
EMAC_PHY_HALFD_100M = 0x2000      
EMAC_PHY_FULLD_10M = 0x0100      
EMAC_PHY_HALFD_10M = 0x0000      
EMAC_PHY_AUTO_NEG = 0x3000      
EMAC_DEF_ADR = 0x0100      
EMAC_DP83848C_ID = 0x20005C90  
EMAC_PHY_SR_100_SPEED = ((1<<14)|(1<<13))
EMAC_PHY_SR_FULL_DUP = ((1<<14)|(1<<12))
EMAC_PHY_BMSR_LINK_STATUS = (1<<2)

class RX_Stat(cstruct):
	pass

class EMAC_CFG_Type(cstruct):
	pass

class EMAC_PACKETBUF_Type(cstruct):
	pass

class RX_Desc(cstruct):
	pass

class TX_Desc(cstruct):
	pass

class TX_Stat(cstruct):
	pass

def EMAC_GetWoLStatus(ulWoLMode):
	return robocaller("EMAC_GetWoLStatus", "FlagStatus", ulWoLMode)

def EMAC_Init(EMAC_ConfigStruct):
	return robocaller("EMAC_Init", "Status", EMAC_ConfigStruct)

def EMAC_CheckReceiveDataStatus(ulRxStatType):
	return robocaller("EMAC_CheckReceiveDataStatus", "FlagStatus", ulRxStatType)

def EMAC_CheckTransmitIndex():
	return robocaller("EMAC_CheckTransmitIndex", "Bool", )

def EMAC_IntCmd(ulIntType, NewState):
	return robocaller("EMAC_IntCmd", "void", ulIntType, NewState)

def EMAC_SetPHYMode(ulPHYMode):
	return robocaller("EMAC_SetPHYMode", "int32_t", ulPHYMode)

def EMAC_IntGetStatus(ulIntType):
	return robocaller("EMAC_IntGetStatus", "IntStatus", ulIntType)

def EMAC_WritePacketBuffer(pDataStruct):
	return robocaller("EMAC_WritePacketBuffer", "void", pDataStruct)

def EMAC_SetHashFilter(dstMAC_addr, NewState):
	return robocaller("EMAC_SetHashFilter", "void", dstMAC_addr, NewState)

def EMAC_CheckReceiveIndex():
	return robocaller("EMAC_CheckReceiveIndex", "Bool", )

def EMAC_UpdatePHYStatus():
	return robocaller("EMAC_UpdatePHYStatus", "int32_t", )

def EMAC_CheckPHYStatus(ulPHYState):
	return robocaller("EMAC_CheckPHYStatus", "int32_t", ulPHYState)

def EMAC_UpdateTxProduceIndex():
	return robocaller("EMAC_UpdateTxProduceIndex", "void", )

def EMAC_DeInit():
	return robocaller("EMAC_DeInit", "void", )

def EMAC_GetReceiveDataSize():
	return robocaller("EMAC_GetReceiveDataSize", "uint32_t", )

def EMAC_UpdateRxConsumeIndex():
	return robocaller("EMAC_UpdateRxConsumeIndex", "void", )

def EMAC_ReadPacketBuffer(pDataStruct):
	return robocaller("EMAC_ReadPacketBuffer", "void", pDataStruct)

def EMAC_SetFilterMode(ulFilterMode, NewState):
	return robocaller("EMAC_SetFilterMode", "void", ulFilterMode, NewState)

